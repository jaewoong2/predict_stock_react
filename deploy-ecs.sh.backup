#!/bin/bash

# ECS 배포 스크립트 (Docker Compose 지원)
set -e

# 색상 코드
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 변수 설정
AWS_REGION=${AWS_REGION:-"ap-northeast-2"}
AWS_PROFILE=${AWS_PROFILE:-"lime_admin"}
PROJECT_NAME="stock-predict"
ECR_REPO_NAME="${PROJECT_NAME}-app"
DOCKER_COMPOSE_FILE="docker-compose.ecs.yaml"

# 함수 정의
log_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

# 사전 조건 확인
check_prerequisites() {
    log_info "Checking prerequisites..."
    
    # Docker 설치 확인
    if ! command -v docker &> /dev/null; then
        log_error "Docker is not installed"
        exit 1
    fi
    
    # Docker Compose 설치 확인
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        log_error "Docker Compose is not installed"
        exit 1
    fi
    
    # AWS CLI 설치 확인
    if ! command -v aws &> /dev/null; then
        log_error "AWS CLI is not installed"
        exit 1
    fi
    
    # Docker Compose 파일 존재 확인
    if [[ ! -f "$DOCKER_COMPOSE_FILE" ]]; then
        log_error "Docker Compose file not found: $DOCKER_COMPOSE_FILE"
        exit 1
    fi
    
    log_success "All prerequisites satisfied"
}

# AWS 계정 ID 가져오기
get_aws_account_id() {
    log_info "Getting AWS account information..."
    AWS_ACCOUNT_ID=$(aws sts get-caller-identity --profile ${AWS_PROFILE} --query Account --output text 2>/dev/null)
    if [[ $? -ne 0 ]]; then
        log_error "Failed to get AWS account ID. Check your AWS profile: ${AWS_PROFILE}"
        exit 1
    fi
    ECR_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}"
    log_success "AWS Account ID: ${AWS_ACCOUNT_ID}"
}

# 로컬 테스트 (옵션)
test_locally() {
    if [[ "$1" == "--test" ]]; then
        log_info "Testing application locally with Docker Compose..."
        docker-compose -f ${DOCKER_COMPOSE_FILE} down --remove-orphans 2>/dev/null || true
        docker-compose -f ${DOCKER_COMPOSE_FILE} up --build -d
        
        log_info "Waiting for application to start..."
        sleep 10
        
        # 헬스체크
        if curl -f http://localhost:3000/api/health >/dev/null 2>&1; then
            log_success "Local test passed!"
            docker-compose -f ${DOCKER_COMPOSE_FILE} logs --tail=20
        else
            log_warning "Local health check failed, but continuing..."
            docker-compose -f ${DOCKER_COMPOSE_FILE} logs --tail=20
        fi
        
        docker-compose -f ${DOCKER_COMPOSE_FILE} down
        log_info "Local test completed"
    fi
}

# AWS 계정 ID 가져오기
AWS_ACCOUNT_ID=$(aws sts get-caller-identity --profile ${AWS_PROFILE} --query Account --output text)
ECR_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}"

echo "🚀 Starting deployment process..."
echo "📍 Region: ${AWS_REGION}"
echo "👤 Profile: ${AWS_PROFILE}"
echo "🏷️  ECR URI: ${ECR_URI}"

# ECR 로그인
echo "🔐 Logging into ECR..."
aws ecr get-login-password --region ${AWS_REGION} --profile ${AWS_PROFILE} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com

# Docker 이미지 빌드
echo "🔨 Building Docker image..."
docker build -f Dockerfile.ecs -t ${ECR_REPO_NAME}:latest .

# Docker 이미지 태그
echo "🏷️  Tagging Docker image..."
docker tag ${ECR_REPO_NAME}:latest ${ECR_URI}:latest
docker tag ${ECR_REPO_NAME}:latest ${ECR_URI}:$(date +%Y%m%d%H%M%S)

# ECR에 이미지 푸시
echo "📤 Pushing Docker image to ECR..."
docker push ${ECR_URI}:latest
docker push ${ECR_URI}:$(date +%Y%m%d%H%M%S)

# ECS 서비스 업데이트
echo "🔄 Updating ECS service..."
aws ecs update-service \
    --cluster ${PROJECT_NAME}-cluster \
    --service ${PROJECT_NAME}-service \
    --force-new-deployment \
    --region ${AWS_REGION} \
    --profile ${AWS_PROFILE}

echo "✅ Deployment completed successfully!"
echo "🌐 Your application will be available shortly at the load balancer DNS."

# 선택적: 배포 상태 확인
echo "📊 Checking deployment status..."
aws ecs wait services-stable \
    --cluster ${PROJECT_NAME}-cluster \
    --services ${PROJECT_NAME}-service \
    --region ${AWS_REGION} \
    --profile ${AWS_PROFILE}

echo "🎉 Service is now stable and running!"
